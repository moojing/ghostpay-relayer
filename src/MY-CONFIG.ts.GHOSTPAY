/*
 * Configure your overrides for default settings and networks here.
 */

import { DebugLevel } from './models/debug-models';
import { NetworkChainID } from './server/config/config-chains';
import configDefaults from './server/config/config-defaults';
import configNetworks from './server/config/config-networks';
import { GAS_TOKEN_DECIMALS } from './models/token-models';
import configTokens from './server/config/config-tokens';
import { ChainType } from '@railgun-community/shared-models';
import { parseUnits } from 'ethers';

// MAKE CHANGES IN myConfigOverrides() BELOW
// MAKE CHANGES IN myConfigOverrides() BELOW
// MAKE CHANGES IN myConfigOverrides() BELOW

// HELPER FUNCTIONS
/**
 * Converts a number value to a token value.
 * @param value The number value to convert.
 * @returns The token value.
 */
const tokenValue = (value: number) => {
  return parseUnits(String(value), GAS_TOKEN_DECIMALS);
};

/**
 * Sets the maximum spend percentage for a specific network. This is the maximum percentage of the
 * expected gas token balance recieved that will be spent on a single transaction.
 * @param chainId - The chain ID of the network.
 * @param value - The maximum spend percentage value to set.
 */
const setMaxSpendPercentageForNetwork = (
  chainId: NetworkChainID,
  value: number,
) => {
  configNetworks[ChainType.EVM][chainId].topUp.maxSpendPercentage = value;
}

/**
 * Sets the amount to unshield for top-up on a specific network.
 *
 * @param chainId - The chain ID of the network.
 * @param value - The value to set as the top-up unshield amount.
 */
const setTopUpUnshieldAmountForNetwork = (
  chainId: NetworkChainID,
  value: number,
) => {
  configNetworks[ChainType.EVM][chainId].topUp.swapThresholdIntoGasToken = tokenValue(value);
}

/**
 * Sets the threshold to begin attempting top-up for a specific network.
 *
 * @param chainId - The chain ID of the network.
 * @param value - The value to set as the top-up begin threshold.
 */
const setTopUpBeginThresholdForNetwork = (
  chainId: NetworkChainID,
  value: number
) => {
  configNetworks[ChainType.EVM][chainId].topUp.minimumGasBalanceForTopup = tokenValue(value);
}

/**
 * Sets the minimum availability balance for a specific network.
 *
 * @param chainId - The chain ID of the network.
 * @param value - The value to set as the minimum availability balance.
 */
const setMinAvailabilityBalanceForNetwork = (
  chainId: NetworkChainID,
  value: number,
) => {
  configNetworks[ChainType.EVM][chainId].gasToken.minBalanceForAvailability = value;
}

/**
 * Enables or disables native token accumulation for a specific network.
 * @param chainId - The chain ID of the network.
 * @param value - The value indicating whether native token accumulation should be enabled or disabled.
 */
const enableNativeTokenAccumulationForNetwork = (
  chainId: NetworkChainID,
  value: boolean,
) => {
  configNetworks[ChainType.EVM][chainId].topUp.accumulateNativeToken = value;
}

// MAKE CHANGES IN myConfigOverrides() BELOW
// MAKE CHANGES IN myConfigOverrides() BELOW
// MAKE CHANGES IN myConfigOverrides() BELOW
// MAKE CHANGES IN myConfigOverrides() BELOW

export const myConfigOverrides = () => {
  // Use these indices to configure HD wallets from the same mnemonic.
  // Each individual wallet needs gas funds, but they reuse the same RAILGUN wallet.
  configDefaults.wallet.hdWallets = [
    {
      index: 0,
      priority: 1,
    },
  ];

  // Set other configs, for example:
  //
  configDefaults.debug.logLevel = DebugLevel.WarningsErrors;
  //

  configDefaults.networks.EVM = [
    // NetworkChainID.Ethereum,          // requires poi-node configured
    NetworkChainID.EthereumGoerli,    // requires poi-node configured
    NetworkChainID.BNBChain,
    NetworkChainID.PolygonPOS,
    NetworkChainID.PolygonMumbai,
    NetworkChainID.Arbitrum,
  ];

  configDefaults.waku.rpcURL = 'http://nwaku1:8546';
  configDefaults.waku.rpcURLBackup = 'http://nwaku2:8547';
  //@todo: add mnemonic
  configDefaults.wallet.mnemonic = '';


  configNetworks[ChainType.EVM][
    NetworkChainID.EthereumGoerli
  ].fallbackProviderConfig.providers.unshift({
    provider: 'https://api.zan.top/node/v1/eth/goerli/public',
    priority: 1,
    weight: 1,
  });

  // use WETH as fee 
  configTokens[ChainType.EVM][NetworkChainID.EthereumGoerli]['0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6'] = {
    symbol: 'WETH',
  };
};
